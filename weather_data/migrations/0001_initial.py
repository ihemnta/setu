# Generated by Django 4.2.7 on 2025-08-18 06:55

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Region",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("code", models.CharField(max_length=10, unique=True)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Region",
                "verbose_name_plural": "Regions",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="WeatherParameter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                ("display_name", models.CharField(max_length=100)),
                ("unit", models.CharField(max_length=20)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Weather Parameter",
                "verbose_name_plural": "Weather Parameters",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DataIngestionLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("partial", "Partially Completed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("records_processed", models.IntegerField(default=0)),
                ("records_created", models.IntegerField(default=0)),
                ("records_updated", models.IntegerField(default=0)),
                ("records_failed", models.IntegerField(default=0)),
                ("start_time", models.DateTimeField(auto_now_add=True)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True)),
                ("source_url", models.URLField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "parameter",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ingestion_logs",
                        to="weather_data.weatherparameter",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ingestion_logs",
                        to="weather_data.region",
                    ),
                ),
            ],
            options={
                "verbose_name": "Data Ingestion Log",
                "verbose_name_plural": "Data Ingestion Logs",
                "ordering": ["-start_time"],
            },
        ),
        migrations.CreateModel(
            name="WeatherRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                (
                    "value",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(-100),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("quality_flag", models.CharField(blank=True, max_length=10)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parameter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="weather_records",
                        to="weather_data.weatherparameter",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="weather_records",
                        to="weather_data.region",
                    ),
                ),
            ],
            options={
                "verbose_name": "Weather Record",
                "verbose_name_plural": "Weather Records",
                "ordering": ["-date", "region", "parameter"],
                "indexes": [
                    models.Index(fields=["date"], name="weather_dat_date_475399_idx"),
                    models.Index(
                        fields=["region", "parameter"],
                        name="weather_dat_region__12450b_idx",
                    ),
                    models.Index(
                        fields=["parameter", "date"],
                        name="weather_dat_paramet_1f5881_idx",
                    ),
                    models.Index(
                        fields=["region", "date"], name="weather_dat_region__b7009f_idx"
                    ),
                ],
                "unique_together": {("region", "parameter", "date")},
            },
        ),
        migrations.CreateModel(
            name="WeatherAggregate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "aggregate_type",
                    models.CharField(
                        choices=[
                            ("monthly", "Monthly Average"),
                            ("yearly", "Yearly Average"),
                            ("seasonal", "Seasonal Average"),
                            ("decadal", "Decadal Average"),
                        ],
                        max_length=20,
                    ),
                ),
                ("period_start", models.DateField()),
                ("period_end", models.DateField()),
                ("avg_value", models.DecimalField(decimal_places=2, max_digits=8)),
                ("min_value", models.DecimalField(decimal_places=2, max_digits=8)),
                ("max_value", models.DecimalField(decimal_places=2, max_digits=8)),
                ("record_count", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parameter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="weather_aggregates",
                        to="weather_data.weatherparameter",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="weather_aggregates",
                        to="weather_data.region",
                    ),
                ),
            ],
            options={
                "verbose_name": "Weather Aggregate",
                "verbose_name_plural": "Weather Aggregates",
                "ordering": ["-period_start", "region", "parameter"],
                "indexes": [
                    models.Index(
                        fields=["aggregate_type", "period_start"],
                        name="weather_dat_aggrega_f3ba97_idx",
                    ),
                    models.Index(
                        fields=["region", "parameter", "aggregate_type"],
                        name="weather_dat_region__141804_idx",
                    ),
                ],
                "unique_together": {
                    (
                        "region",
                        "parameter",
                        "aggregate_type",
                        "period_start",
                        "period_end",
                    )
                },
            },
        ),
    ]
